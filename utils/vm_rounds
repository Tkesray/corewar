#!/usr/bin/env node
const { promisify } = require('util')
const { promises: fs, open, close } = require("fs");
const child_process = require('child_process')
const { resolve, join } = require('path')
const tmp = require("tmp-promise");
const openAsync = promisify(open)
const closeAsync = promisify(close)
const chalk = require('chalk')

const [dir] = process.argv.slice(2);

const ZAZ_COREWAR_PATH = join(__dirname, "..", "ressources", "corewar");
const OUR_COREWAR_PATH = join(__dirname, "..", "corewar");

function diff(path1, path2) {
	return new Promise((resolve, reject) => {
		child_process.exec(`diff ${path1} ${path2}`, (err, stdout, stderr) => {
			const split = stdout.split('\n', 5);
			if (err) {
				console.log(chalk.red(split[1]) + chalk.white(" || ") + chalk.red(split[3]));
				reject(err)
			}
			else resolve();
		})
	})

}

function runOurVM(cwd, champions) {
	return new Promise((resolve) => {
		const process = child_process.spawn(OUR_COREWAR_PATH, ['-v'].concat(champions), {
			stdio: 'ignore',
			cwd
		});
		process.once('close', resolve)
	})
}

async function runZazVM(cwd, champions) {
	const fd = await openAsync(join(cwd, "verbose_zaz"), "w")
	try {
		await new Promise((resolve) => {
			const process = child_process.spawn(ZAZ_COREWAR_PATH, ['-v', '30'].concat(champions), {
				stdio: ['ignore', fd, 'ignore'],
				cwd
			});
			process.once('close', resolve)
		})
	} finally {
		await closeAsync(fd);
	}
}

(async () => {
	const champions = (await fs.readdir(dir)).reverse()
	const promises = [];
	let runs = 0;
	big: for (const [i, first] of champions.slice(0, -1).entries()) {
		for (const second of champions.slice(i + 1)) {
			promises.push((async () => {
				const directory = await tmp.dir({ unsafeCleanup: true });
				try {
					const champions = [
							resolve(dir, first),
							resolve(dir, second)
					]
					await Promise.all([
						runOurVM(directory.path, champions),
						runZazVM(directory.path, champions)
					])
					try {
						await diff(join(directory.path, "verbose"), join(directory.path, "verbose_zaz"))
						console.log(chalk.green(`${first} vs ${second} no diff !`));
					} catch {
						console.log(chalk.red(`${first} vs ${second} diff !`));
					}
				} finally {
					directory.cleanup()
				} 
			})())
			runs++;
			if (runs === 4) {
				const i = await Promise.race(promises.map((p, i) => p.then(() => i)));
				promises.splice(i, 1);
				runs--;
			}
			//break big;
		}
	 }
	 await Promise.all(promises);
})()
